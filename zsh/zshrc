# Set the directory we want to store zinit and plugins
ZINIT_HOME="${XDG_DATA_HOME:-${HOME}/.local/share}/zinit/zinit.git"

# Download Zinit, if it's not there yet
if [ ! -d "$ZINIT_HOME" ]; then
   mkdir -p "$(dirname $ZINIT_HOME)"
   git clone https://github.com/zdharma-continuum/zinit.git "$ZINIT_HOME"
fi

# Source/Load zinit
source "${ZINIT_HOME}/zinit.zsh"

# Add in zsh plugins
zinit light zsh-users/zsh-syntax-highlighting
zinit light zsh-users/zsh-completions
zinit light zsh-users/zsh-autosuggestions

# Add in snippets
zinit snippet OMZP::git
zinit snippet OMZP::sudo
zinit snippet OMZP::command-not-found
zinit snippet OMZP::extract
zinit snippet OMZP::git-commit
# zinit snippet OMZP::git-prompt
# zinit snippet OMZP::nvm
# zinit snippet OMZP::ufw
export NVM_COMPLETION=true
export NVM_SYMLINK_CURRENT="true"
export NVM_LAZY_LOAD=true
export NVM_LAZY_LOAD_EXTRA_COMMANDS=('vim' 'nvim')
zinit wait lucid light-mode for lukechilds/zsh-nvm


# Load completions
autoload -Uz compinit promptinit colors && compinit
zinit cdreplay -q


# ZSH modules and settings
export TZ=US/Pacific

setopt AUTO_PARAM_SLASH
setopt AUTO_PUSHD
setopt CORRECT
setopt CSH_NULL_GLOB
setopt EXTENDED_GLOB
setopt EXTENDED_HISTORY
setopt HISTIGNOREDUPS
setopt LIST_TYPES
setopt MARK_DIRS
setopt MENUCOMPLETE
setopt NOBEEP
setopt NO_CLOBBER
setopt NO_HIST_BEEP
setopt NO_MAIL_WARNING
setopt prompt_subst     # Allows for functions in the prompt
setopt histignorespace    # if there's a space at the beginning of a command, don't store it in the history file (Good if you need to put a password in)

# History settings
export HISTFILE=~/.zsh_history
export HISTSIZE=10000
export SAVEHIST=$HISTSIZE
setopt appendhistory
setopt sharehistory
setopt hist_ignore_space
setopt hist_ignore_all_dups
setopt hist_save_no_dups
setopt hist_ignore_dups
setopt hist_find_no_dups

# TERM=tmux-256color
# TERM=screen-256color
# TERM=xterm-256color

# import .aliases
if [ -r ~/.aliases ]; then
    . ~/.aliases;
fi

# import .functions
if [ -r ~/.functions ]; then
    . ~/.functions;
fi

# List directories when changing directories
chpwd() {
    ls
}
preexec() {
    ODIR="$(pwd)"
}
precmd() {
    [[ "$(pwd)" != $ODIR ]] \
    && [[ "$(pwd)" != $HOME ]] \
    && ODIR="$(pwd)"
}

# Disable pausing/resuming terminal with C-s and C-q
stty ixoff -ixon
stty stop undef

# Use unicode for Locale (en_US.UTF-8)
export LC_ALL=en_US.UTF-8
export LC_CTYPE="en_US.UTF-8"

# My Path.
typeset -U PATH
# export PATH=$PATH:~/bin:~/bin/bin:~/.local/bin:~/.vim/bundle:~bin/llvm/Debug+Asserts/bin:.
export PATH=$PATH:~/bin:~/bin/bin:~/.local/bin:.
export PYTHONPATH=$PYTHONPATH:~/.local

# System vars
export VISUAL=vim
if command -v nvim &> /dev/null; then
    export EDITOR=nvim
else
    export EDITOR=vim
fi

export GIT_EDITOR=$EDITOR
export PAGER=less
export INPUTRC=~/.inputrc
export LESS_TERMCAP_mb=$'\E[01;31m'
export LESS_TERMCAP_md=$'\E[01;34m'
export LESS_TERMCAP_me=$'\E[0m'
export LESS_TERMCAP_se=$'\E[0m'
export LESS_TERMCAP_so=$'\E[01;44;33m'
export LESS_TERMCAP_ue=$'\E[0m'
export LESS_TERMCAP_us=$'\E[01;32m'

# Change the timestamp color for `exa --long` so it's readable
export EXA_COLORS="da=1;34"

# Make sure colors are always turned on for pm2
export FORCE_COLOR=1

# Everyone likes a pretty PS1
export PS1="%{$fg[green]%}%n%{$fg[blue]%}@%{$reset_color%}%{$fg[lightgrey]%}%M%{$reset_color%}:%{$fg[blue]%}%B%2~%b %B$%b "

# Zsh git integration for the right prompt
source $HOME/.git-prompt.sh

# Make file utils more verbose
for c in rm chmod chown rename; do
    alias $c="$c -v"
done

# Make it so noclobber and verbose are on for file utils
for c in cp mv; do
    alias $c="$c -vn"
done

# ZSH Command completion
zstyle ':completion:*' use-cache on
zstyle ':completion:*' cache-path ~/.local/share/zsh

# Sets up [Tab][Tab] to show labels
# as well as previous command args
_complete_plus_last_command_args() {
    last_command=$history[$[HISTCMD-1]]
    last_command_array=("${(s/ /)last_command}")
    _sep_parts last_command_array
    _complete
}

_force_rehash() {
    (( CURRENT == 1 )) && rehash
    return 1 # Because we didn't really complete anything
}

# Make it so zsh does not try using vim-keys
bindkey -e

# Make C-K clear to the end of the line (hopefully)
bindkey '' kill-line

# Move backward through the menu with Shift-tab
bindkey '[Z' reverse-menu-complete

zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:::::' completer _force_rehash _complete_plus_last_command_args _approximate

# Additional ZSH completion stuff
zstyle -e ':completion:*:approximate:*' max-errors 'reply=( $(( ($#PREFIX + $#SUFFIX) / 3 )) )'
zstyle ':completion:*:*:-subscript-:*' tag-order aliases indexes parameters
zstyle ':completion:*' matcher-list '' 'm:{a-zA-Z}={A-Za-z}'
zstyle ':completion:*:descriptions' format "- %d -"
zstyle ':completion:*:corrections' format "- %d - (errors %e})"
zstyle ':completion:*:default' list-prompt '%S%M matches%s'
zstyle ':completion:*' group-name ''
zstyle ':completion:*:manuals' separate-sections true
zstyle ':completion:*' menu select
zstyle ':completion:*' verbose yes

# Completion for the kill command
zstyle ':completion:*:kill:*' command 'ps -u $USER -o pid,%cpu,tty,cputime,cmd'
zstyle ':completion:*:kill:*' insert-ids single
zstyle ':completion:*:*:kill:*' menu yes select
zstyle ':completion:*:kill:*' force-list always

# Settings for the nvm plugins
zstyle ':omz:plugins:nvm' lazy yes
zstyle ':omz:plugins:nvm' autoload yes
zstyle ':omz:plugins:nvm' lazy-cmd node npm nvm eslint biome vim nvim
zstyle ':omz:plugins:nvm' silent-autoload yes


autoload copy-earlier-word && zle -N copy-earlier-word && bindkey '^[,' copy-earlier-word

typeset -A key

# Try to force home/end to work properly
bindkey '\e[1~' beginning-of-line
bindkey '\e[4~' end-of-line

[[ -n "${terminfo[khome]}"    ]]  && bindkey  "${terminfo[khome]}"  beginning-of-line                   # Home key
[[ -n "${terminfo[kend]}"     ]]  && bindkey  "${terminfo[kend]}"   end-of-line                         # End key
[[ -n "${terminfo[kich1]}"    ]]  && bindkey  "${terminfo[kich1]}"  overwrite-mode                      # Insert
[[ -n "${terminfo[kdch1]}"    ]]  && bindkey  "${terminfo[kdch1]}"  delete-char                         # Delete
[[ -n "${terminfo[kcuu1]}"    ]]  && bindkey  "${terminfo[kcuu1]}"  history-beginning-search-backward   # Up
[[ -n "${terminfo[kcud1]}"    ]]  && bindkey  "${terminfo[kcud1]}"  history-beginning-search-forward    # Down
[[ -n "${terminfo[kcub1]}"    ]]  && bindkey  "${terminfo[kcub1]}"  backward-char                       # Left
[[ -n "${terminfo[kcuf1]}"    ]]  && bindkey  "${terminfo[kcuf1]}"  forward-char                        # Right


# Finally, make sure the terminal is in application mode, when zle is
# active. Only then are the values from $terminfo valid.
if (( ${+terminfo[smkx]} )) && (( ${+terminfo[rmkx]} )); then
    function zle-line-init () {
        printf '%s' "${terminfo[smkx]}"
    }
    function zle-line-finish () {
        printf '%s' "${terminfo[rmkx]}"
    }
    zle -N zle-line-init
    zle -N zle-line-finish
fi


# To change a few things if I am on a mac
_myos="$(uname)"

# TMUX (checks for install first)
case $_myos in
   Linux)
       if which tmux 2>&1 >/dev/null; then
           if [ -z "$TMUX" ] && [ ${UID} != 0 ]
           then
               tmux new-session -A -s main
           fi
       fi
       ;;
   Darwin)
       if which ~/bin/bin/bin/tmux 2>&1 >/dev/null; then
           # if no session is started, start a new session
           test -z ${TMUX} && tmux

           # when quitting tmux, try to attach
           while test -z ${TMUX}; do
               tmux attach || break
           done
       fi
       ;;
   *) ;;
esac
