# Set the directory we want to store zinit and plugins
ZINIT_HOME="${XDG_DATA_HOME:-${HOME}/.local/share}/zinit/zinit.git"

# Set the dir that the extra bits and pieces are stored
SCRIPTS_DIR=~/.config/scripts

# Download Zinit, if it's not there yet
if [ ! -d "$ZINIT_HOME" ]; then
   mkdir -p "$(dirname $ZINIT_HOME)"
   git clone https://github.com/zdharma-continuum/zinit.git "$ZINIT_HOME"
fi

# Source/Load zinit
source "${ZINIT_HOME}/zinit.zsh"

# Add in zsh plugins
zinit ice depth"1"; zinit light zdharma-continuum/fast-syntax-highlighting
zinit ice depth"1"; zinit light zsh-users/zsh-autosuggestions
zinit ice depth"1"; zinit light zsh-users/zsh-completions

# Add in snippets
zinit ice depth"1"; zinit snippet OMZP::command-not-found
zinit ice depth"1"; zinit snippet OMZP::extract


# Load completions
autoload -Uz compinit && (compinit &)
zinit cdreplay -q


# ZSH modules and settings
export TZ=US/Pacific

setopt AUTO_PARAM_SLASH
setopt AUTO_PUSHD
setopt CORRECT
setopt CSH_NULL_GLOB
setopt EXTENDED_GLOB
setopt EXTENDED_HISTORY
setopt HISTIGNOREDUPS
setopt HISTIGNORESPACE    # if there's a space at the beginning of a command, don't store it in the history file (Good if you need to put a password in)
setopt LIST_TYPES
setopt MARK_DIRS
setopt MENUCOMPLETE
setopt NOBEEP
setopt NO_CLOBBER
setopt NO_HIST_BEEP
setopt NO_MAIL_WARNING
setopt prompt_subst     # Allows for functions in the prompt

# History settings
# export HISTFILE=~/.zsh_history
export HISTFILE=$XDG_STATE_HOME/zsh/.zsh_history
export HISTSIZE=10000
export SAVEHIST=$HISTSIZE
setopt appendhistory
# setopt sharehistory   # This will share the history / update it in all tmux panes (Kinda annoying)
setopt hist_ignore_space
setopt hist_ignore_all_dups
setopt hist_save_no_dups
setopt hist_ignore_dups
setopt hist_find_no_dups

TERM=tmux-256color
# TERM=screen-256color
# TERM=xterm-256color
# export TERM='xterm-256color'

# import .aliases
if [ -r $SCRIPTS_DIR/.aliases ]; then
    . $SCRIPTS_DIR/.aliases;
fi

# import .functions
if [ -r $SCRIPTS_DIR/.functions ]; then
    . $SCRIPTS_DIR/.functions;
fi

# List directories when changing directories
chpwd() {
    ls
}
preexec() {
    ODIR="$(pwd)"
}
precmd() {
    [[ "$(pwd)" != $ODIR ]] \
    && [[ "$(pwd)" != $HOME ]] \
    && ODIR="$(pwd)"
}

# Disable pausing/resuming terminal with C-s and C-q
stty ixoff -ixon
stty stop undef

# Use unicode for Locale (en_US.UTF-8)
export LC_ALL=en_US.UTF-8
export LC_CTYPE="en_US.UTF-8"

# My Path.
typeset -U PATH
# export PATH=$PATH:~/bin:~/bin/bin:~/.local/bin:~/.vim/bundle:~bin/llvm/Debug+Asserts/bin:.
export PATH=$PATH:~/bin:~/bin/bin:~/.local/bin:~/.cargo/bin:.
export PYTHONPATH=$PYTHONPATH:~/.local

# Golang paths
export GOPATH=$HOME/.config/gocode
export PATH=$PATH:$GOPATH/bin

# System vars
export VISUAL=vim
if command -v nvim &> /dev/null; then
    export EDITOR=nvim
else
    export EDITOR=vim
fi

export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8

export GIT_EDITOR=$EDITOR
export PAGER=less
export INPUTRC=~/.inputrc
export LESS_TERMCAP_mb=$'\E[01;31m'
export LESS_TERMCAP_md=$'\E[01;34m'
export LESS_TERMCAP_me=$'\E[0m'
export LESS_TERMCAP_se=$'\E[0m'
export LESS_TERMCAP_so=$'\E[01;44;33m'
export LESS_TERMCAP_ue=$'\E[0m'
export LESS_TERMCAP_us=$'\E[01;32m'

# Change the timestamp color for `exa --long` so it's readable
export EXA_COLORS="da=1;34"
export EZA_COLORS="reset:da=1;34:di=1;34:"

# Make sure colors are always turned on for pm2
export FORCE_COLOR=1

# Everyone likes a pretty PS1
export PS1="%{$fg[green]%}%n%{$fg[blue]%}@%{$reset_color%}%{$fg[lightgrey]%}%M%{$reset_color%}:%{$fg[blue]%}%B%2~%b %B$%b "

# Zsh git integration for the right prompt
source $HOME/.config/zsh/.git-prompt.sh

# ZSH Command completion
zstyle ':completion:*' use-cache on
zstyle ':completion:*' cache-path ~/.local/share/zsh

# Sets up [Tab][Tab] to show labels
# as well as previous command args
_complete_plus_last_command_args() {
    last_command=$history[$[HISTCMD-1]]
    last_command_array=("${(s/ /)last_command}")
    _sep_parts last_command_array
    _complete
}

_force_rehash() {
    (( CURRENT == 1 )) && rehash
    return 1 # Because we didn't really complete anything
}

# Make it so zsh does not try using vim-keys
bindkey -e

# Make C-K clear to the end of the line (hopefully)
bindkey '' kill-line

# Move backward through the menu with Shift-tab
bindkey '[Z' reverse-menu-complete

zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:::::' completer _force_rehash _complete_plus_last_command_args _approximate

# Additional ZSH completion stuff
zstyle -e ':completion:*:approximate:*' max-errors 'reply=( $(( ($#PREFIX + $#SUFFIX) / 3 )) )'
zstyle ':completion:*:*:-subscript-:*' tag-order aliases indexes parameters
zstyle ':completion:*' matcher-list '' 'm:{a-zA-Z}={A-Za-z}'
zstyle ':completion:*:descriptions' format "- %d -"
zstyle ':completion:*:corrections' format "- %d - (errors %e})"
zstyle ':completion:*:default' list-prompt '%S%M matches%s'
zstyle ':completion:*' group-name ''
zstyle ':completion:*:manuals' separate-sections true
zstyle ':completion:*' menu select
zstyle ':completion:*' verbose yes

# disable sort when completing `git checkout`
zstyle ':completion:*:git-checkout:*' sort false

# Completion for the kill command
zstyle ':completion:*:kill:*' command 'ps -u $USER -o pid,%cpu,tty,cputime,cmd'
zstyle ':completion:*:kill:*' insert-ids single
zstyle ':completion:*:*:kill:*' menu yes select
zstyle ':completion:*:kill:*' force-list always

# Settings for the nvm plugins
# zstyle ':omz:plugins:nvm' lazy yes
# zstyle ':omz:plugins:nvm' autoload yes
# zstyle ':omz:plugins:nvm' lazy-cmd node npm nvm eslint biome vim nvim
# zstyle ':omz:plugins:nvm' silent-autoload yes


autoload copy-earlier-word && zle -N copy-earlier-word && bindkey '^[,' copy-earlier-word

typeset -A key

# Try to force home/end to work properly
bindkey '\e[1~' beginning-of-line
bindkey '\e[4~' end-of-line

[[ -n "${terminfo[khome]}"    ]]  && bindkey  "${terminfo[khome]}"  beginning-of-line                   # Home key
[[ -n "${terminfo[kend]}"     ]]  && bindkey  "${terminfo[kend]}"   end-of-line                         # End key
[[ -n "${terminfo[kich1]}"    ]]  && bindkey  "${terminfo[kich1]}"  overwrite-mode                      # Insert
[[ -n "${terminfo[kdch1]}"    ]]  && bindkey  "${terminfo[kdch1]}"  delete-char                         # Delete
[[ -n "${terminfo[kcuu1]}"    ]]  && bindkey  "${terminfo[kcuu1]}"  history-beginning-search-backward   # Up
[[ -n "${terminfo[kcud1]}"    ]]  && bindkey  "${terminfo[kcud1]}"  history-beginning-search-forward    # Down
[[ -n "${terminfo[kcub1]}"    ]]  && bindkey  "${terminfo[kcub1]}"  backward-char                       # Left
[[ -n "${terminfo[kcuf1]}"    ]]  && bindkey  "${terminfo[kcuf1]}"  forward-char                        # Right


# Finally, make sure the terminal is in application mode, when zle is
# active. Only then are the values from $terminfo valid.
if (( ${+terminfo[smkx]} )) && (( ${+terminfo[rmkx]} )); then
    function zle-line-init () {
        printf '%s' "${terminfo[smkx]}"
    }
    function zle-line-finish () {
        printf '%s' "${terminfo[rmkx]}"
    }
    zle -N zle-line-init
    zle -N zle-line-finish
fi


# To change a few things if I am on a mac
_myos="$(uname)"

# TMUX (checks for install first)
case $_myos in
   Linux)
       if which tmux 2>&1 >/dev/null && [ -z "$TMUX" ] && [ ${UID} != 0 ]; then
           tmux new-session -A -s main
       fi
       ;;
   Darwin)
       if which ~/bin/bin/bin/tmux 2>&1 >/dev/null; then
           # if no session is started, start a new session
           test -z ${TMUX} && tmux

           # when quitting tmux, try to attach
           while test -z ${TMUX}; do
               tmux attach || break
           done
       fi
       ;;
   *) ;;
esac

# ---------
# Setup fzf
# ---------
# If fzf isn't in the path, add it.
if [[ ! "$PATH" == *${XDG_SCRIPT_HOME}/fzf/bin* ]]; then
    PATH="${PATH:+${PATH}:}${XDG_SCRIPT_HOME}/fzf/bin"
fi
if command -v fzf &> /dev/null; then
    source <(${XDG_SCRIPT_HOME}/fzf/bin/fzf --zsh)
fi

bindkey '' fzf-history-widget
bindkey '' fzf-file-widget
bindkey '<M-c>' fzf-cd-widget
export FZF_DEFAULT_COMMAND="fd --hidden --strip-cwd-prefix --exclude .git"
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
export FZF_CTRL_R_OPTS="
  --bind 'ctrl-y:execute-silent(echo -n {2..} | pbcopy)+abort'
  --color header:italic
  --header 'Press CTRL-Y to copy command into clipboard'"
export FZF_ALT_C_COMMAND="fd --type=d --hidden --strip-cwd-prefix --exclude .git"
export FZF_DEFAULT_OPTS="--style full --preview 'fzf-preview.sh {}' --bind 'focus:transform-header:file --brief {}' --height 50% --layout=default --border --color=hl:#2dd4bf --layout=default --border --color=hl:#2dd4bf"
export FZF_DEFAULT_OPTS=$FZF_DEFAULT_OPTS'
  --color=fg:#d0d0d0,fg+:#d0d0d0,bg:#0f0f0f,bg+:#2e2e2e
  --color=hl:#87afd7,hl+:#afd7ff,info:#d7d787,marker:#87af87
  --color=prompt:#d787d7,spinner:#87d7d7,pointer:#87d7d7,header:#666666
  --color=border:#87afd7,separator:#666666,label:#d0d0d0,query:#d0d0d0
  --border="rounded" --border-label="" --preview-window="border-rounded" --prompt="> "
  --marker=">" --pointer="â—†" --separator="â”€" --scrollbar="â”‚"'
export FZF_CTRL_T_OPTS="--preview 'bat --color=always -n --line-range :500 {}'"
export FZF_ALT_C_OPTS="--preview 'eza --icons=always --tree --color=always {} | head -200'"
export FZF_TMUX_OPTS=" -p90%,70% "


# fnm
FNM_PATH="$HOME/.local/share/fnm"
if [ -d "$FNM_PATH" ]; then
  export PATH="$HOME/.local/share/fnm:$PATH"
  eval "`fnm env`"
fi
