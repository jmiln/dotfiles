set nocompatible

" Enable filetype plugins and indention
filetype off
filetype plugin on
filetype plugin indent on       " Turn on filetype specific options

"                   Abbreviations {{{
"=========================================================

" Easy shortcuts for the top of C files
ab #i #include
ab #d #define

" Common bits for js/ node
ab reqins const {inspect} = require("util");
ab inspectdepth inspect(, {depth: 5})

" Useful for eslint
ab nounused // eslint-disable-line no-unused-vars
ab noundef  // eslint-disable-line no-undef

" Useful ones for Discord stuff
ab mslang message.language.get()
ab embedsep '=============================='

" Other shortcuts for splitting/ marking stuff
abb dotlin ‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶
abb cdotlin /*‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶‚Ä¶*/
abb fdotlin ‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢
abb cfdotlin /*‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢*/
abb dlin =======================================================================
abb cdlin /*===================================================================*/
abb lin -----------------------------------------------------------------------
abb clin /*-------------------------------------------------------------------*/
abb ulin _______________________________________________________________________
abb culin /*___________________________________________________________________*/
abb Ulin ¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø
abb cUlin /*¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø*/
" }}}
"                   Colorscheme / Syntax Settings {{{
"=========================================================
set background=dark
set t_Co=256      " Let vim know that terminal has 256 colors"
syntax on         " Turns the syntax highlighting on

set termguicolors

hi Normal                                                                       guibg=#1C1C1C

hi Visual        cterm=none                                       guifg=white   guibg=#5f5f5f
hi Comment       cterm=none      ctermfg=red                      guifg=#d70000 guibg=background
hi Constant      cterm=none      ctermfg=grey
hi ColorColumn   cterm=none      ctermfg=none
hi Error         cterm=none      ctermfg=red       ctermbg=black  guifg=red     guibg=black
hi Folded        cterm=none      ctermfg=blue      ctermbg=grey   guifg=white   guibg=#5f5f5f
hi FoldColumn                    ctermfg=59        ctermbg=234    guifg=#5F5F5F guibg=#1C1C1C
hi Search        cterm=none      ctermfg=blue      ctermbg=grey   guifg=black   guibg=#5f5f5f
hi MatchParen                                                     guifg=black   guibg=white
hi Identifier    cterm=none      ctermfg=grey                     guifg=grey
hi LineNr                        ctermfg=59        ctermbg=234    guifg=#5F5F5F guibg=#1C1C1C
hi SignColumn                    ctermfg=59        ctermbg=234    guifg=#5F5F5F guibg=#1C1C1C
hi NonText       cterm=none      ctermfg=88
hi Normal        cterm=none      ctermfg=grey
hi PreProc       cterm=none      ctermfg=22
hi Special       cterm=none      ctermfg=127
hi Statement     cterm=none      ctermfg=green                    guifg=green4
hi Statusline    cterm=none      ctermfg=grey
hi TabLineFill   cterm=none      ctermfg=none
hi Type          cterm=bold      ctermfg=green                    guifg=green3
hi VertSplit     cterm=none      ctermfg=blue      ctermbg=grey
hi Visual        cterm=reverse   ctermfg=none

" C specific colors
hi cStorageClass cterm=none      ctermfg=22
hi cString       cterm=none      ctermfg=blue
hi cNumber       cterm=none      ctermfg=18
hi cConstant     cterm=none      ctermfg=none
hi cStatement    cterm=none      ctermfg=22


" SpellCheck specific colors
hi SpellBad      cterm=underline ctermfg=88
hi SpellCap      cterm=underline
hi SpellRare     cterm=underline
hi SpellLocal    cterm=underline

" Completion menu colors
hi Pmenu         cterm=none      ctermfg=Cyan                     guifg=white   guibg=#5f5f5f
hi PmenuSel      cterm=Bold      ctermfg=Black     ctermbg=239    guifg=Black   guibg=darkgrey
hi PmenuSbar     cterm=none      ctermfg=cyan      ctermbg=Cyan
hi PmenuThumb    cterm=none      ctermfg=White

" Cursor specific colores
hi CursorLine    cterm=none      ctermfg=none
hi CursorColumn  cterm=none      ctermfg=none
hi CursorLineNr  cterm=none      ctermfg=246

" Enables cursor line position tracking:
set cursorline

" Removes all styling for cursorline
highlight clear CursorLine
highlight clear CursorLineNR

" Git diff coloring
hi DiffAdded   gui=NONE guifg=green  guibg=#1C1C1C
hi DiffChanged  gui=NONE guifg=yellow guibg=#1C1C1C
hi DiffText    gui=NONE guifg=black  guibg=green
hi DiffRemoved gui=NONE guifg=red    guibg=#1C1C1C

au BufNewFile,BufRead *.ejs set filetype=html
let g:html_indent_inctags = "html,body,head,tbody"
" }}}
"                   Mapping {{{
"=========================================================

cmap ww w !sudo tee > /dev/null %

let mapleader=","

" Make easy editing and sourcing vimrc
command! RefreshConfig source $MYVIMRC <bar> echo "Refreshed vimrc!"

" <Leader> ev for edit vimrc
nnoremap <leader>ev :vsplit $MYVIMRC<cr>
" <Leader> sv for sourcing vimrc
nnoremap <leader>sv :RefreshConfig<cr>

" Search for a word under the cursor in the current dir
map <leader>* :grep -R <cword> * --exclude-dir={.git,tmp,log,node_modules}<CR><CR>

" Search for a word under the cursor in the current git project
" map <leader>* :Ggrep --untracked <cword><CR><CR>

" Show commit that introduced current line
nmap <silent><Leader>g :call setbufvar(winbufnr(popup_atcursor(split(system("git log -n 1 -L " . line(".") . ",+1:" . expand("%:p")), "\n"), { "padding": [1,1,1,1], "pos": "botleft", "wrap": 0 })), "&filetype", "git")<CR>

" Some QoL mappings for the autocomplete menu
imap     <expr> <CR>       pumvisible() ? "\<C-y>" : "\<Plug>delimitMateCR"
inoremap <expr> <Down>     pumvisible() ? "\<C-n>" : "\<Down>"
inoremap <expr> <Up>       pumvisible() ? "\<C-p>" : "\<Up>"
inoremap <expr> <PageDown> pumvisible() ? "\<PageDown>\<C-p>\<C-n>" : "\<PageDown>"
inoremap <expr> <PageUp>   pumvisible() ? "\<PageUp>\<C-p>\<C-n>" : "\<PageUp>"

" Indend current file
nnoremap <Leader>= gg=G

" Underline the current line with various symbols (such that the number of
" underline matches line length and indendation)
" nnoremap <Leader>= yypVr=
nnoremap <Leader>- yypVr-
nnoremap <Leader># yypVr#
nnoremap <Leader>" yypVr"
" A fancy unicode underline
nnoremap <Leader>U yypVr‚îÅ

" Makes the arrow keys work in vim, not sure why they had stopped in the first place
" though  still mess up when trying to search)
set t_ku=OA
set t_kd=OB
set t_kr=OC
set t_kl=OD

map OA <up>
map OB <down>
map OC <right>
map OD <left>

imap <ESC>oA <ESC>ki
imap <ESC>oB <ESC>ji
imap <ESC>oC <ESC>li
imap <ESC>oD <ESC>hi

" Bubble single lines
nmap <C-K> ddkP
nmap <C-J> ddp

" Bubble multiple lines
vmap <C-K> xkP`[V`]
vmap <C-J> xp`[V`]

" turns off the search highlighting
map <silent> <Space> :nohlsearch <CR>

" Makes it easier to redo
map <silent> r <C-R>

" Toggle spellcheck
" map <silent> ss :set spell!<CR>

" Select current line, without the indentation
nnoremap vv ^vg_

" For local replace
nnoremap gr gd[{V%:s/<C-R>///gc<left><left><left>

" For global replace
nnoremap gR gD:%s/<C-R>///gc<left><left><left>

nmap <silent> <F3> :set number!<CR>

" Toggles word wrap
map <silent> <F4> :set invwrap <CR>

" Toggles the mouse so you can use it for visual mode
" and then back to being able to use it for copy/ paste (does not seem to work on mac)
nnoremap <silent> <F5> :call ToggleMouse()<CR>
function! ToggleMouse()
    if &mouse == 'a'
        set mouse=
    else
        set mouse=a
    endif
endfunction

" Toggle pate with <F6>, default is off
set pastetoggle=off
set pastetoggle=<F6>

" Toggles the syntax highlighting
map <silent> <F7> :if exists("syntax_on") <Bar>
            \   syntax off <Bar>
            \ else <Bar>
            \   syntax enable <Bar>
            \ endif <CR>

" Tells me what syntax attribute is under the cursor
nnoremap <F8> :call SyntaxAttr()<CR>

" Toggle the invisible stuff
nnoremap <silent><F9> :set invlist<CR>

" }}}
"                   Plugin links etc.  {{{
"=========================================================

" Install vim-plug if it's not already there
if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
                \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/bundle')

" Github repos
Plug 'airblade/vim-gitgutter'
Plug 'alvan/vim-closetag'
" Plug 'ap/vim-css-color'
Plug 'dense-analysis/ale'
Plug 'farmergreg/vim-lastplace'
Plug 'junegunn/gv.vim'
Plug 'junegunn/vim-easy-align'
Plug 'Konfekt/FastFold'
" Plug 'lilydjwg/colorizer'
" Plug 'marijnh/tern_for_vim'
" Plug 'majutsushi/tagbar'
Plug 'mattn/emmet-vim', {'for': ['html', 'ejs', 'css', 'scss']}
" Plug 'preservim/nerdtree', { 'on':  'NERDTreeToggle' }
Plug 'Raimondi/delimitMate'
Plug 'sheerun/vim-polyglot'
Plug 'andymass/vim-matchup'
Plug 'tomtom/tcomment_vim'
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-ragtag', {'for': ['html', 'ejs', 'css', 'scss']}
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
" Plug 'unkiwii/vim-nerdtree-sync'
" Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'zhimsel/vim-stay'

" Displays the syntax attributes of the character under the cursor
" Plug 'vim-scripts/SyntaxAttr.vim'

" Autocomplete/ stuff
Plug 'neoclide/coc.nvim', {'branch': 'release'}
let g:coc_global_extensions = [ 'coc-eslint', 'coc-css', 'coc-json' ]

" Vim Coc config
" {{{

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
            \ pumvisible() ? "\<C-n>" :
            \ <SID>check_back_space() ? "\<TAB>" :
            \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" }}}

" vim-scripts repos
" Plug 'vim-scripts/L9'

" Disabled
" Plug 'RRethy/vim-hexokinase', { 'do': 'make hexokinase' }
" Plug 'ervandew/supertab'

call plug#end()


" }}}
"                   Plugin Settings {{{
"=========================================================


" Toggles comments using the tComment plugin
map <C-/> <c-_><c-_>
imap <C-/> <ESC><c-_><c-_>

let g:tcommentLineC='// %s'

" Delimitmate
let delimitMate_expand_cr = 1
let delimitMate_matchpairs = "(:),[:],{:}"

" EasyAlign
xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)
let g:easy_align_delimiters = {
\ '>': { 'pattern': '>>\|=>\|>' },
\ '/': {
\     'pattern':         '//\+\|/\*\|\*/',
\     'delimiter_align': 'l',
\     'ignore_groups':   ['!Comment'] },
\ ']': {
\     'pattern':       '[[\]]',
\     'left_margin':   0,
\     'right_margin':  0,
\     'stick_to_left': 0
\   },
\ ')': {
\     'pattern':       '[()]',
\     'left_margin':   0,
\     'right_margin':  0,
\     'stick_to_left': 0
\   },
\ 'd': {
\     'pattern':      ' \(\S\+\s*[;=]\)\@=',
\     'left_margin':  0,
\     'right_margin': 0
\   }
\ }

" Emmet
let g:user_emmet_leader_key=','
let g:user_emmet_install_global = 0
" Use emmet only for html and css files
autocmd FileType html,ejs,css,scss EmmetInstall
" Make it so emmet doesn't conflict with other tab completion stuff
autocmd FileType html,ejs,css iunmap <tab>
autocmd FileType html,ejs,css imap <expr> <tab> emmet#expandAbbrIntelligent("\<tab>")

au BufNewFile,BufRead .bashrc,.aliases set filetype=bash

" Supertab settings
let g:SuperTabDefaultCompletionType = "context"
let g:SuperTabLongestHighlight = 1

" Enable ycm for only the filestypes it's useful in so it stops screwing with
" stuff here
let g:ycm_filetype_whitelist = {'js': 1, 'json': 1}

" Hexokinase highlighter settings
let g:Hexokinase_highlighters = ['backgroundfull']

"  Ale
" Enable completion where available.
let g:ale_completion_enabled = 1

" Disable checking code unless I save it
let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_insert_leave = 0
let g:ale_lint_on_enter = 0
let g:ale_fix_on_save = 1

" Check & fix JavaScript code with ESlint
let g:ale_linters = {
            \   'javascript': ['eslint'],
            \}
let g:ale_fixers = {
            \   '*': ['remove_trailing_lines'],
            \}

let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
let g:ale_open_list = 1
nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)

" Close the error window if it's all that's left?
augroup CloseLoclistWindowGroup
    autocmd!
    autocmd QuitPre * if empty(&buftype) | lclose | endif
augroup END




function! LinterStatus() abort
    let l:counts = ale#statusline#Count(bufnr(''))

    let l:all_errors = l:counts.error + l:counts.style_error
    let l:all_non_errors = l:counts.total - l:all_errors

    return l:counts.total == 0 ? ' OK' : printf(
                \   ' %dW %dE',
                \   all_non_errors,
                \   all_errors
                \)
endfunction

set statusline+=%{LinterStatus()}

" Tagbar
" let g:tagbar_usearrows = 1
" let g:tagbar_singleclick = 1
" let g:tagbar_autofocus = 1
"
" Tagbar binding
" nnoremap <silent><F2> :TagbarToggle<CR>



" Nerd Tree

" Check if NERDTree is open or active
function! IsNERDTreeOpen()
    return exists("t:NERDTreeBufName") && (bufwinnr(t:NERDTreeBufName) != -1)
endfunction

" Call NERDTreeFind iff NERDTree is active, current window contains a modifiable
" file, and we're not in vimdiff
function! SyncTree()
    if &modifiable && IsNERDTreeOpen() && strlen(expand('%')) > 0 && !&diff
        NERDTreeFind
        wincmd p
    endif
endfunction

" Close vim if the only window left open is a NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

let g:NERDTreeDirArrowExpandable = '‚Øà'
let g:NERDTreeDirArrowCollapsible = '‚ØÜ'
let g:NERDTreeIndicatorMapCustom = {
            \ "Modified"  : "‚úπ",
            \ "Staged"    : "‚úö",
            \ "Untracked" : "‚ú≠",
            \ "Renamed"   : "‚ûú",
            \ "Unmerged"  : "‚ïê",
            \ "Deleted"   : "‚úñ",
            \ "Dirty"     : "‚úó",
            \ "Clean"     : "‚úîÔ∏é",
            \ 'Ignored'   : '‚òí',
            \ "Unknown"   : "?"
            \ }

nnoremap <silent><F11> :NERDTreeFind<cr>
nnoremap <silent><F12> :NERDTreeToggle<cr>


" Highlight currently open buffer in NERDTree
autocmd BufRead * call SyncTree()

" Open NERDTree when you open a file
" autocmd VimEnter * if argc() == 1 | NERDTreeFind | wincmd p | else | NERDTreeFind | endif


" }}}
"                   Settings {{{
"=========================================================
set backspace=indent,eol,start " Enable backspacing over autoindent, EOL, and BOL"
set clipboard=unnamed
set complete=.,w,b,u,t,i
set completeopt=menu,longest
set encoding=utf-8              " Default encoding
set formatoptions=t             " Fix formatting (line width) when editing"
set hid                         " Enable changing buffers without saving
set history=10000               " Sets the amount of commands that I can scroll back through to 10000
set laststatus=2
set listchars=tab:.\ ,eol:¬¨,trail:.,extends:.,precedes:.
set magic                       " Enable magic (Not really sure...)
set mat=2                       " Time to show matching parens
set matchpairs+=<:>             " Allow matching of brackets too!
set modeline                    " Allow vim options to be embedded in files
set modelines=5                 " they must be within the first or last 5 lines"
set noautoread                  " Don't automatically re-read changed files."
set noautowrite                 " Never write a file unless I request it.
set noautowriteall              " NEVER.
set norelativenumber
set noswapfile                  " Turn off annoying swapfiles
set nowrap                      " Lets the lines wrap when the line gets to long
set number                      " Sets it so there are numbered lines in vim
set signcolumn=yes
set numberwidth=2               " Default width of line numbering"
set omnifunc=syntaxcomplete#Complete
set ruler                       " Keeps the block at the bottom right corner that tells what line and column you are on
set scrolloff=1
set shell=/bin/zsh              " My shell
set shortmess=s
set showbreak=.                 " What to show a line wrap as
set showmatch                   " Highlight matching parens
set showmode                    " Shows the mode for when in insert etc..
set smartcase
set smarttab
set splitbelow
set splitright
set t_ut=                       " Turns off the bells (I think)
set title                       " Sets the window title so it shows what file you are in
set undolevels=1000             " Keeps the last 1000 modifications to undo
set whichwrap+=b,s,h,l,<,>,[,]  " Lets you move the cursor through line breaks
set wildmenu                                        " Enable wild menu
set wildmode=longest,list,full                      " Extended wild menu"
set winminheight=0
set wrapscan                    " Sets it to wrap searches from bottom to top

" Session Settings
set sessionoptions=resize,winpos,winsize,buffers,tabpages,folds,curdir,help  "

let no_buffers_menu=1


" Backup Settings
set nobackup " disable backup
set noswapfile
set undodir=~/.vim/undodir
set undofile

" Tab Settings
set tabstop=4 softtabstop=4     " Sets TAB to the same space as four spaces  not seem to be working though)
set expandtab                   " Makes all the tabs turn to spaces
set shiftwidth=4
set smartindent

" Search Settings
set hlsearch                    " Sets it to highlight each word that matches the search
set incsearch                   " Sets it to show the search results as the word is typed in
set ignorecase                  " Sets the search to ignore the case so it will show capitalized results when only lowercase is typed in

" These next two use some of the highlighting lower down
" set cursorline                  " Sets it to highlight the row that I am on
" set cursorcolumn                " Sets it to highlight the column that I am on

" Better modes. Remember where we are, support yankring
set viminfo=!,'100,\"100,:20,<50,s10,h,n~/.viminfo>'

" Sets it so there is no beeping or screen flashes
set vb t_vb="

" Setting the statusilne formatting
set statusline  =
set statusline +=%1*\ %n\ %*     " Buffer number
set statusline +=[%{&ff}\ -\ %{&fenc}\ -\ %y]  " FileFormat, encoding, fileType
set statusline +=%4*\ %<%f%*     " Full path
set statusline +=%2*%m%*         " Modified flag
set statusline +=%=              " Right align everything after this
set statusline +=Line:%l\/%L\ Column:%c%V\ %P   " Line/lines, column, percentage

" Remember last location in a file for when you re-open it
" au BufReadPost * if line("'\"") > 0|if line("'\"") <= line("$")|exe("norm '\"")|else|exe "norm $"|endif|endif
" :au BufReadPost *
"    \ if line("'\"") > 1 && line("'\"") <= line("$") && &ft !~# 'commit'
"    \ |   exe "normal! g`\""
"    \ | endif

" Reload vim when .vimrc is written (very useful for when testing)
autocmd! bufwritepost .vimrc source %   " When .vimrc is written, reload it

" Remove trailing spaces when you save a file
autocmd BufWritePre * :call TrimWhitespace()       " :%s/\s\+$//e

" Some hopeful settings for php/ html etc.
au BufNewFile,BufRead *.php,*.html,*.css setlocal nocindent smartindent
set indentkeys=0{,0},:,0#,!^F,o,O,e,*,<>>,,end,:

" Set .ejs files to be like html
au BufNewFile,BufRead *.ejs set filetype=html

" }}}

"                   Folding {{{
"=========================================================
" Fold settings
set foldcolumn=1                " Defines 1 col at window left, to indicate folding
set foldmethod=marker
set foldnestmax=2               " Don't nest folds
set foldlevelstart=99           " Start with all folds open

" This will make the folds look nice and neat, with the number of folded lines
" on the right edge
function! MyFoldText()
    let line = getline(v:foldstart)

    let nucolwidth = &fdc + &number * max([&numberwidth, strlen(line('$'))])
    let windowwidth = winwidth(0) - nucolwidth - 6
    let foldedlinecount = v:foldend - v:foldstart

    " Expand tabs into spaces
    let onetab = strpart(' ', 0, &tabstop)
    let line = substitute(line, '\t', onetab, 'g')

    " Clean up the folds for in .vimrc
    " Replace the comment ", and any extra spaces before the title
    let line = substitute(line, '\"\s*', onetab, 'g')
    " Replace the 3 { brackets that mark the fold
    let line = substitute(line, repeat("{", 3), '', 'g')

    let line = strpart(line, 0, windowwidth - 2 -len(foldedlinecount))
    let fillcharcount = windowwidth - len(line) - len(foldedlinecount)
    return line . repeat(" ",fillcharcount) . foldedlinecount . '    '
endfunction
set foldtext=MyFoldText()

" Set the .vimrc file to close all relevant folds on open
au BufRead,BufNewFile .vimrc set foldlevel=0

" Set folding to be based on syntax for js files
au BufNewFile,BufRead *.js set foldmethod=syntax
let g:javaScript_fold = 1

" restore vim - helping keep settings after closing it
set viewoptions=options,cursor,folds,slash,unix
au BufWinLeave \* silent! mkview  "make vim save view (state) (folds, cursor, etc)
au BufWinEnter \* silent! loadview "make vim load view (state) (folds, cursor, etc)

" }}}

"                   Functions {{{
"=========================================================
fun! TrimWhitespace()
    let l:save = winsaveview()
    keeppatterns %s/\s\+$//e
    call winrestview(l:save)
endfun

" }}}

"====================
"       tests
"====================

" Tells vim that everything useful is above this
finish


"##############################################################################
"#########################  Key Mappings/ Codes  ##############################
"##############################################################################

" These names for keys are used in the documentation.  They can also be used
" with the ":map" command (insert the key name by pressing CTRL-K and then the
" key you want the name for).
"
" notation  meaning         equivalent  decimal value(s)    ~
"-----------------------------------------------------------------------
" <Nul>     zero            CTRL-@    0 (stored as 10) *<Nul>*
" <BS>      backspace       CTRL-H    8                 *backspace*
" <Tab>     tab             CTRL-I    9                 *tab* *Tab*
"                           *linefeed*
" <NL>      linefeed        CTRL-J   10                 (used for <Nul>)
" <FF>      formfeed        CTRL-L   12                 *formfeed*
" <CR>      car return      CTRL-M   13                 *carriage-return*
" <Return>  same as <CR>                                *<Return>*
" <Enter>   same as <CR>                                *<Enter>*
" <Esc>     escape          CTRL-[   27                 *escape* *<Esc>*
" <Space>   space                    32                 *space*
" <lt>      less-than       <        60                 *<lt>*
" <Bslash>  backslash       \        92                 *backslash* *<Bslash>*
" <Bar>     vertical bar    |       124                 *<Bar>*
" <Del>     delete                  127
"
" <EOL>     end-of-line (can be <CR>, <LF> or <CR><LF>,
"           depends on system and 'fileformat')             *<EOL>*
"
" <Up>      cursor-up                                   *cursor-up* *cursor_up*
" <Down>    cursor-down                                 *cursor-down* *cursor_down*
" <Left>    cursor-left                                 *cursor-left* *cursor_left*
" <Right>   cursor-right                                *cursor-right* *cursor_right*
" <S-Up>    shift-cursor-up
" <S-Down>  shift-cursor-down
" <S-Left>  shift-cursor-left
" <S-Right> shift-cursor-right
" <C-Left>  control-cursor-left
" <C-Right> control-cursor-right
" <F1> - <F12>  function keys 1 to 12                   *function_key* *function-key*
" <S-F1> - <S-F12> shift-function keys 1 to 12          *<S-F1>*
" <Help>        help key
" <Undo>        undo key
" <Insert>  insert key
" <Home>        home                                        *home*
" <End>     end                                         *end*
" <PageUp>  page-up                                     *page_up* *page-up*
" <PageDown>    page-down                                   *page_down* *page-down*
" <kHome>   keypad home (upper left)                    *keypad-home*
" <kEnd>        keypad end (lower left)                     *keypad-end*
" <kPageUp> keypad page-up (upper right)                *keypad-page-up*
" <kPageDown>keypad page-down (lower right)             *keypad-page-down*
" <kPlus>   keypad +                                    *keypad-plus*
" <kMinus>  keypad -                                    *keypad-minus*
" <kMultiply>keypad *                                   *keypad-multiply*
" <kDivide> keypad /                                    *keypad-divide*
" <kEnter>  keypad Enter                                *keypad-enter*
" <kPoint>  keypad Decimal point                        *keypad-point*
" <k0> - <k9>keypad 0 to 9                              *keypad-0* *keypad-9*
" <S-...>   shift-key                                   *shift* *<S-*
" <C-...>   control-key                                 *control* *ctrl* *<C-*
" <A-...>   same as <M-...>                             *<A-*
" <t_xx>        key with "xx" entry in termcap

"##############################################################################

" The ':map' command creates a key map that works in normal, visual, select and operator pending modes.
" The ':map!' command creates a key map that works in insert and command-line mode.
