# ZSH modules and settings
autoload -U compinit promptinit colors
colors
compinit -i
promptinit

export TZ=US/Pacific

setopt AUTO_PARAM_SLASH
setopt AUTO_PUSHD
setopt CORRECT
setopt CSH_NULL_GLOB
setopt EXTENDED_GLOB
setopt EXTENDED_HISTORY
setopt HISTIGNOREDUPS
setopt LIST_TYPES
setopt MARK_DIRS
setopt MENUCOMPLETE
setopt NOBEEP
setopt NO_CLOBBER
setopt NO_HIST_BEEP
setopt NO_MAIL_WARNING
setopt prompt_subst     # Allows for functions in the prompt

TERM=xterm-256color

autoload -U colors && colors # Enable colors in promptetopt SHARE_HISTORY

# import .aliases
if [ -r ~/.aliases ]; then
    . ~/.aliases;
fi

# import .functions
if [ -r ~/.functions ]; then
    . ~/.functions;
fi

# Java thingy
export _JAVA_AWT_WM_NONREPARENTING=1

# List directories when changing directories
chpwd() {
    ls
}
preexec() {
    ODIR="$(pwd)"
}

precmd() {
    [[ "$(pwd)" != $ODIR ]] \
    && [[ "$(pwd)" != $HOME ]] \
    && ODIR="$(pwd)"
}

# Disable pausing/resuming terminal with C-s and C-q
stty ixoff -ixon
stty stop undef

# Use unicode for Locale (en_US.UTF-8)
export LC_ALL=en_US.UTF-8
export LC_CTYPE="en_US.UTF-8"

# My Path.
typeset -U PATH
# export PATH=$PATH:~/bin:~/bin/bin:~/.local/bin:~/.vim/bundle:~bin/llvm/Debug+Asserts/bin:.
export PATH=$PATH:~/bin:~/bin/bin:~/.local/bin:.
export PYTHONPATH=$PYTHONPATH:~/.local

# System vars
export VISUAL=vim
export EDITOR=vim
export GIT_EDITOR=$EDITOR
export PAGER=less
export HISTFILE=~/.zsh_history
export HISTSIZE=10000
export SAVEHIST=10000
export INPUTRC=~/.inputrc
export LESS_TERMCAP_mb=$'\E[01;31m'
export LESS_TERMCAP_md=$'\E[01;34m'
export LESS_TERMCAP_me=$'\E[0m'
export LESS_TERMCAP_se=$'\E[0m'
export LESS_TERMCAP_so=$'\E[01;44;33m'
export LESS_TERMCAP_ue=$'\E[0m'
export LESS_TERMCAP_us=$'\E[01;32m'

# Everyone likes a pretty PS1
export PS1="%{$fg[green]%}%n%{$fg[blue]%}@%{$reset_color%}%{$fg[lightgrey]%}%M%{$reset_color%}:%{$fg[blue]%}%B%2~%b %B$%b "

# Zsh git integration for the right prompt
source $HOME/.git-prompt.sh

# Make file utils more verbose
for c in rm chmod chown rename; do
    alias $c="$c -v"
done

# Make it so noclobber and verbose are on for file utils
for c in cp mv; do
    alias $c="$c -vn"
done

# ZSH Command completion
zstyle ':completion:*' use-cache on
zstyle ':completion:*' cache-path ~/.local/share/zsh

# Sets up [Tab][Tab] to show labels
# as well as previous command args
_complete_plus_last_command_args() {
    last_command=$history[$[HISTCMD-1]]
    last_command_array=("${(s/ /)last_command}")
    _sep_parts last_command_array
    _complete
}

_force_rehash() {
    (( CURRENT == 1 )) && rehash
    return 1 # Because we didn't really complete anything
}

# Make it so zsh does not try using vim-keys
bindkey -e

# Make C-K clear to the end of the line (hopefully)
bindkey '' kill-line


# Move backward through the menu with Shift-tab
bindkey '[Z' reverse-menu-complete

zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:::::' completer _force_rehash _complete_plus_last_command_args _approximate

# Additional ZSH completion stuff
zstyle -e ':completion:*:approximate:*' max-errors 'reply=( $(( ($#PREFIX + $#SUFFIX) / 3 )) )'
zstyle ':completion:*:*:-subscript-:*' tag-order aliases indexes parameters
zstyle ':completion:*' matcher-list '' 'm:{a-zA-Z}={A-Za-z}'
zstyle ':completion:*:descriptions' format "- %d -"
zstyle ':completion:*:corrections' format "- %d - (errors %e})"
zstyle ':completion:*:default' list-prompt '%S%M matches%s'
zstyle ':completion:*' group-name ''
zstyle ':completion:*:manuals' separate-sections true
zstyle ':completion:*' menu select
zstyle ':completion:*' verbose yes
zstyle ':completion:*:kill:*' command 'ps -u $USER -o pid,%cpu,tty,cputime,cmd'
zstyle ':completion:*:kill:*' insert-ids single
zstyle ':completion:*:*:kill:*' menu yes select
zstyle ':completion:*:kill:*' force-list always

autoload copy-earlier-word && zle -N copy-earlier-word && bindkey '^[,' copy-earlier-word

typeset -A key

# key[PageUp]=${terminfo[kpp]}
# key[PageDown]=${terminfo[knp]}

bindkey '\e[1~' beginning-of-line
bindkey '\e[4~' end-of-line

[[ -n "${terminfo[khome]}"    ]]  && bindkey  "${terminfo[khome]}"  beginning-of-line                   # Home key
[[ -n "${terminfo[kend]}"     ]]  && bindkey  "${terminfo[kend]}"   end-of-line                         # End key
[[ -n "${terminfo[kich1]}"    ]]  && bindkey  "${terminfo[kich1]}"  overwrite-mode                      # Insert
[[ -n "${terminfo[kdch1]}"    ]]  && bindkey  "${terminfo[kdch1]}"  delete-char                         # Delete
[[ -n "${terminfo[kcuu1]}"    ]]  && bindkey  "${terminfo[kcuu1]}"  history-beginning-search-backward   # Up
[[ -n "${terminfo[kcud1]}"    ]]  && bindkey  "${terminfo[kcud1]}"  history-beginning-search-forward    # Down
[[ -n "${terminfo[kcub1]}"    ]]  && bindkey  "${terminfo[kcub1]}"  backward-char                       # Left
[[ -n "${terminfo[kcuf1]}"    ]]  && bindkey  "${terminfo[kcuf1]}"  forward-char                        # Right


# Finally, make sure the terminal is in application mode, when zle is
# active. Only then are the values from $terminfo valid.
if (( ${+terminfo[smkx]} )) && (( ${+terminfo[rmkx]} )); then
    function zle-line-init () {
        printf '%s' "${terminfo[smkx]}"
    }
    function zle-line-finish () {
        printf '%s' "${terminfo[rmkx]}"
    }
    zle -N zle-line-init
    zle -N zle-line-finish
fi


# To change a few things if I am on a mac
_myos="$(uname)"

# TMUX (checks for install first)
case $_myos in
   Linux)
       if which tmux 2>&1 >/dev/null; then
           if [ -z "$TMUX" ] && [ ${UID} != 0 ]
           then
               tmux new-session -A -s main
           fi
           #     # if no session is started, start a new session
           #     test -z ${TMUX} && tmux
           #
           #     # when quitting tmux, try to attach
           #     while test -z ${TMUX}; do
           #         tmux attach || break
           #     done
       fi
       ;;
   Darwin)
       if which ~/bin/bin/bin/tmux 2>&1 >/dev/null; then
           # if no session is started, start a new session
           test -z ${TMUX} && tmux

           # when quitting tmux, try to attach
           while test -z ${TMUX}; do
               tmux attach || break
           done
       fi
       ;;
   *) ;;
esac

export NVM_DIR="$HOME/.nvm"
# These are the Node versions installed by nvm. Add the latest one to the PATH by default.
node_versions=("$NVM_DIR"/versions/node/*)
if  (( $#node_versions > 0 )); then
    PATH="$PATH:${node_versions[${#node_versions[@]} - 1]}/bin"
fi
# Load up node as needed, swiped from https://www.reddit.com/r/node/comments/4tg5jg/lazy_load_nvm_for_faster_shell_start/d5ib9fs/?context=3
declare -a NODE_GLOBALS=(`find ~/.nvm/versions/node -maxdepth 3 -type l -wholename '*/bin/*' | xargs -n1 basename | sort | uniq`)

NODE_GLOBALS+=("node")
NODE_GLOBALS+=("nvm")
NODE_GLOBALS+=("vim")
NODE_GLOBALS+=("nvim")

load_nvm () {
    export NVM_DIR="$HOME/.nvm"
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
    [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
}

for cmd in "${NODE_GLOBALS[@]}"; do
    eval "${cmd}(){ unset -f ${NODE_GLOBALS}; load_nvm; ${cmd} \$@ }"
done

#########################
#     Test
#########################



# Zsh syntax highlighting (https://github.com/zsh-users/zsh-syntax-highlighting || apt-get install zsh-syntax-highlighting)
source /usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
